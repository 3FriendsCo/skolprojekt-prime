#pragma once
#include <unordered_map>
#include <string>

enum Token_type
{
    UNKNOWN = -5,
    IDENTIFIER = -4,
    STR_LITERAL = -3,
    CHAR_LITERAL = -2,
    NUM_LITERAL = -1,
    SEIZE = 0,
    LIBERATE = 1,
    BANISH = 2,
    GLOBAL = 3,
    STATIC = 4,
    CONST = 5,
    MAIN = 6,
    FUNCTION = 7,
    RETURN = 8,
    USING = 9,
    ENUM = 10,
    NAMESPACE = 11,
    STRUCT = 12,
    CLASS = 13,
    UNSIGNED = 14,
    SHORT = 15,
    INT = 16,
    LONG = 17,
    FLOAT = 18,
    DOUBLE = 19,
    BOOLEAN = 20,
    CHAR = 21,
    STRING = 22,
    IF = 23,
    ELSE = 24,
    CONTINUE = 25,
    BREAK = 26,
    WHILE = 27,
    LOOP = 28,
    FOR = 29,
    SWITCH = 30,
    BASIC_NAMESPACE = 31,
    LOG = 32,
    FORMATTED_LOG = 33,
    READ = 34,
    FORMATTED_READ = 35,
    WRITE = 36,
    FORMATTED_WRITE = 37,
    FILE_TOKEN = 100, // Corrected token for "file"
    NOTE = 101,       // Added missing "note" token
    END = 1000,
    CLOSE = 2312,
    DOT = 102,
    COMMA = 103,
    COLON = 104,
    SEMICOLON = 105,
    QUESTIONMARK = 106,
    EXCLAMATIONPOINT = 107,
    SINGLE_QOUTE = 108,
    DOUBLE_QOUTE = 109,
    L_PAREN = 110,
    R_PAREN = 111,
    L_CURLBRACKET = 112,
    R_CURLBRACKET = 113,
    L_BRACKET = 114,
    R_BRACKET = 115,
    LINE = 116,
    HASH = 117,
    AT_S = 118,
    DOLLAR = 119,
    REFERENCE_S = 120,
    PROCENT_S = 121,
    AND_S = 122,
    UNDERLINE = 123,
    B_SLASH = 124,
    BACKTICK = 125,
    CIRCUMFLEX = 126,
    TILDE = 127,
    SECTION_S = 128,
    PLUS = 129,
    MINUS = 130,
    ASTRISK = 131,
    F_SLASH = 132,
    LESS_THAN = 133,
    GREATER_THAN = 134
};

struct Token
{
    Token_type type;
    std::string value;
    // META DATA:
    int position, row;
    std::string line;
};

Token_type match_to_prime_keyword(const std::string &keyword)
{
    static const std::unordered_map<std::string, Token_type> prime_keywords = {
        {"seize", SEIZE},
        {"liberate", LIBERATE},
        {"banish", BANISH},
        {"global", GLOBAL},
        {"static", STATIC},
        {"const", CONST},
        {"main", MAIN},
        {"fn", FUNCTION},
        {"return", RETURN},
        {"using", USING},
        {"enum", ENUM},
        {"namespace", NAMESPACE},
        {"struct", STRUCT},
        {"class", CLASS},
        {"unsigned", UNSIGNED},
        {"short", SHORT},
        {"int", INT},
        {"long", LONG},
        {"float", FLOAT},
        {"double", DOUBLE},
        {"boolean", BOOLEAN},
        {"char", CHAR},
        {"string", STRING},
        {"if", IF},
        {"else", ELSE},
        {"continue", CONTINUE},
        {"break", BREAK},
        {"while", WHILE},
        {"loop", LOOP},
        {"for", FOR},
        {"switch", SWITCH},
        {"bas", BASIC_NAMESPACE},
        {"log", LOG},
        {"logf", FORMATTED_LOG},
        {"read", READ},
        {"readf", FORMATTED_READ},
        {"write", WRITE},
        {"writef", FORMATTED_WRITE},
        {"file", FILE_TOKEN},
        {"note", NOTE},
        {".", DOT},
        {",", COMMA},
        {":", COLON},
        {";", SEMICOLON},
        {"?", QUESTIONMARK},
        {"!", EXCLAMATIONPOINT},
        {"'", SINGLE_QOUTE},
        {"\"", DOUBLE_QOUTE},
        {"(", L_PAREN},
        {")", R_PAREN},
        {"{", L_CURLBRACKET},
        {"}", R_CURLBRACKET},
        {"[", L_BRACKET},
        {"]", R_BRACKET},
        {"|", LINE},
        {"#", HASH},
        {"@", AT_S},
        {"$", DOLLAR},
        {"¤", REFERENCE_S},
        {"%", PROCENT_S},
        {"&", AND_S},
        {"_", UNDERLINE},
        {"\\", B_SLASH},
        {"`", BACKTICK},
        {"^", CIRCUMFLEX},
        {"~", TILDE},
        {"§", SECTION_S},
        {"+", PLUS},
        {"-", MINUS},
        {"*", ASTRISK},
        {"/", F_SLASH},
        {"<", LESS_THAN},
        {">", GREATER_THAN}};

    auto it = prime_keywords.find(keyword);
    if (it != prime_keywords.end())
    {
        return it->second;
    }
    else
    {
        return UNKNOWN;
    }
}